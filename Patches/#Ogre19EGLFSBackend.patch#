diff -x 'build*' -x linaro.cmake -Naur Ogre1.9RC1/CMake/Dependencies.cmake CMake/Dependencies.cmake
--- CMake/Dependencies.cmake                                    2014-01-21 19:26:56.000000000 -0300
+++ CMake/Dependencies.cmake                                 2014-01-23 14:57:32.887271112 -0300
@@ -81,7 +81,7 @@
 macro_log_feature(FREETYPE_FOUND "freetype" "Portable font engine" "http://www.freetype.org" FALSE "" "")
 
 # Find X11
-if (UNIX AND NOT APPLE AND NOT ANDROID AND NOT FLASHCC)
+if (UNIX AND NOT APPLE AND NOT ANDROID AND NOT FLASHCC AND NOT EGLFS)
   find_package(X11)
   macro_log_feature(X11_FOUND "X11" "X Window system" "http://www.x.org" TRUE "" "")
:   macro_log_feature(X11_Xt_FOUND "Xt" "X Toolkit" "http://www.x.org" TRUE "" "")
diff -x 'build*' -x linaro.cmake -Naur CMake/FeatureSummary.cmake CMake/FeatureSummary.cmake
--- CMake/FeatureSummary.cmake                                    2014-01-21 19:26:54.000000000 -0300
+++ CMake/FeatureSummary.cmake                                 2014-01-23 14:51:04.507264023 -0300
@@ -86,6 +86,9 @@
 endif ()
 if (OGRE_BUILD_RENDERSYSTEM_GLES2)
    set(_rendersystems "${_rendersystems}  + OpenGL ES 2.x\n")
+   if (EGLFS)
+      set(_rendersystems "${_rendersystems}  + OpenGL ES 2.x (EGLFS Backend)\n")
+      endif ()
 endif ()
 
 if (DEFINED _rendersystems)
diff -x 'build*' -x linaro.cmake -Naur CMake/Packages/FindOGRE.cmake CMake/Packages/FindOGRE.cmake
--- CMake/Packages/FindOGRE.cmake                                    2014-01-21 19:26:56.000000000 -0300
+++ CMake/Packages/FindOGRE.cmake                                 2014-01-23 11:58:32.034415308 -0300
@@ -264,7 +264,7 @@
   find_package(OpenGLES2 QUIET)
   find_package(ZLIB QUIET)
   find_package(ZZip QUIET)
-  if (UNIX AND NOT APPLE AND NOT ANDROID)
+  if (UNIX AND NOT APPLE AND NOT ANDROID AND NOT EGLFS)
     find_package(X11 QUIET)
     find_library(XAW_LIBRARY NAMES Xaw Xaw7 PATHS ${DEP_LIB_SEARCH_DIR} ${X11_LIB_SEARCH_PATH})
     if (NOT XAW_LIBRARY OR NOT X11_Xt_FOUND)
@@ -287,7 +287,7 @@
   if (NOT FREETYPE_FOUND)
     set(OGRE_DEPS_FOUND FALSE)
   endif ()
-  if (UNIX AND NOT APPLE AND NOT ANDROID)
+  if (UNIX AND NOT APPLE AND NOT ANDROID AND NOT EGLFS)
   if (NOT X11_FOUND)
       set(OGRE_DEPS_FOUND FALSE)
       endif ()
diff -x 'build*' -x linaro.cmake -Naur CMakeLists.txt CMakeLists.txt
--- CMakeLists.txt    2014-01-21 19:27:10.000000000 -0300
+++ CMakeLists.txt 2014-01-23 14:15:18.127224845 -0300
@@ -42,7 +42,6 @@
   set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
 endif ()
 
-
 project(OGRE)
 
 # Include necessary submodules
@@ -220,6 +219,10 @@
 set(OGRE_Plugin_PCZSceneManager_LIBRARIES Plugin_PCZSceneManager)
 set(OGRE_Plugin_OctreeZone_LIBRARIES Plugin_OctreeZone)
 
+if (UNIX)
+  set(EGLFS 1) 
+endif (UNIX)
+
 # Specify build paths
 set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${OGRE_BINARY_DIR}/lib")
 set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${OGRE_BINARY_DIR}/lib")
diff -x 'build*' -x linaro.cmake -Naur OgreMain/CMakeLists.txt OgreMain/CMakeLists.txt
--- OgreMain/CMakeLists.txt 2014-01-21 19:23:22.000000000 -0300
+++ OgreMain/CMakeLists.txt         2014-01-23 16:09:37.292031711 -0300
@@ -159,15 +159,25 @@
 
   set(PLATFORM_HEADER_INSTALL "FlashCC")
 elseif (UNIX)
-  include_directories(include/GLX ${X11_INCLUDE_DIR})
+  if (NOT EGLFS)
+      include_directories(include/GLX ${X11_INCLUDE_DIR})
 
-  file(GLOB PLATFORM_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/include/GLX/*.h"
-      "${CMAKE_CURRENT_SOURCE_DIR}/src/GLX/GLX_backdrop.h")
-  file(GLOB PLATFORM_SOURCE_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/GLX/*.cpp"
-      src/OgreSearchOps.cpp)
+      file(GLOB PLATFORM_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/include/GLX/*.h"
+          "${CMAKE_CURRENT_SOURCE_DIR}/src/GLX/GLX_backdrop.h")
+      file(GLOB PLATFORM_SOURCE_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/GLX/*.cpp"
+          src/OgreSearchOps.cpp)
 
-  set(PLATFORM_LIBS ${X11_LIBRARIES} ${X11_Xt_LIB} ${XAW_LIBRARY} pthread)
-  set(PLATFORM_HEADER_INSTALL "GLX")
+      set(PLATFORM_LIBS ${X11_LIBRARIES} ${X11_Xt_LIB} ${XAW_LIBRARY} pthread)
+      set(PLATFORM_HEADER_INSTALL "GLX")
+  else()
+      file(GLOB PLATFORM_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/include/GLX/OgreTimerImp.h"
+          "${CMAKE_CURRENT_SOURCE_DIR}/src/GLX/GLX_backdrop.h")
+      file(GLOB PLATFORM_SOURCE_FILES "${CMAKE_CURRENT_SOURCE_DIR}/src/GLX/OgreFileSystemLayer.cpp" "${CMAKE_CURRENT_SOURCE_DIR}/src/GLX/OgreTimer.cpp"
+          src/OgreSearchOps.cpp)
+
+      set(PLATFORM_LIBS pthread)
+      set(PLATFORM_HEADER_INSTALL "GLX")
+  endif()
   # some platforms require explicit linking to libdl, see if it's available
   find_library(DL_LIBRARY NAMES dl dlsym)
   mark_as_advanced(DL_LIBRARY)
diff -x 'build*' -x linaro.cmake -Naur RenderSystems/GLES2/CMakeLists.txt RenderSystems/GLES2/CMakeLists.txt
--- RenderSystems/GLES2/CMakeLists.txt                                    2014-01-21 19:27:16.000000000 -0300
+++ RenderSystems/GLES2/CMakeLists.txt                                 2014-01-23 15:13:02.807288086 -0300
@@ -106,12 +106,20 @@
   link_directories(${OPENGLES2_LIBRARY_PATH})
   set(PLATFORM_HEADER_INSTALL "APPLE")
 elseif (UNIX)
-  file(GLOB PLATFORM_HEADERS "include/EGL/X11/*.h" "include/EGL/*.h")
-  file(GLOB PLATFORM_SOURCES "src/EGL/X11/*.cpp" "src/EGL/*.cpp")
+  if (EGLFS)
+    file(GLOB PLATFORM_HEADERS "include/EGL/EGLFS/*.h" "include/EGL/*.h")
+    file(GLOB PLATFORM_SOURCES "src/EGL/EGLFS/*.cpp" "src/EGL/*.cpp")
 
-  include_directories(src/EGL/X11 include/EGL/X11)
-  set(PLATFORM_HEADER_INSTALL "X11")
-  set(PLATFORM_LIBS ${X11_LIBRARIES} ${X11_Xrandr_LIB})
+    include_directories(src/EGL/EGLFS include/EGL/EGLFS)
+    set(PLATFORM_HEADER_INSTALL "EGLFS")
+  else()
+    file(GLOB PLATFORM_HEADERS "include/EGL/X11/*.h" "include/EGL/*.h")
+    file(GLOB PLATFORM_SOURCES "src/EGL/X11/*.cpp" "src/EGL/*.cpp")
+
+    include_directories(src/EGL/X11 include/EGL/X11)
+    set(PLATFORM_HEADER_INSTALL "X11")
+    set(PLATFORM_LIBS ${X11_LIBRARIES} ${X11_Xrandr_LIB})
+  endif ()
 endif ()
 
 # Add support for the RT Shader System
diff -x 'build*' -x linaro.cmake -Naur RenderSystems/GLES2/include/EGL/EGLFS/OgreEGLFSContext.h RenderSystems/GLES2/include/EGL/EGLFS/OgreEGLFSContext.h
--- RenderSystems/GLES2/include/EGL/EGLFS/OgreEGLFSContext.h                                    1969-12-31 21:00:00.000000000 -0300
+++ RenderSystems/GLES2/include/EGL/EGLFS/OgreEGLFSContext.h                                 2014-01-23 12:23:44.998442923 -0300
@@ -0,0 +1,48 @@
+/*
+-----------------------------------------------------------------------------
+This source file is part of OGRE
+    (Object-oriented Graphics Rendering Engine)
+For the latest info, see http://www.ogre3d.org/
+
+Copyright (c) 2008 Renato Araujo Oliveira Filho <renatox@gmail.com>
+Copyright (c) 2000-2014 Torus Knot Software Ltd
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+-----------------------------------------------------------------------------
+*/
+
+#ifndef __EGLFSContext_H__
+#define __GLFSContext_H__
+
+#include "OgreEGLContext.h"
+
+namespace Ogre {
+    class EGLSupport;
+
+    class _OgrePrivate EGLFSContext: public EGLContext
+    {
+        public:
+            EGLFSContext(EGLDisplay eglDisplay, const EGLSupport* glsupport, ::EGLConfig fbconfig, ::EGLSurface drawable);
+            virtual ~EGLFSContext();
+
+            GLES2Context* clone() const;
+    };
+}
+
+#endif
diff -x 'build*' -x linaro.cmake -Naur RenderSystems/GLES2/include/EGL/EGLFS/OgreEGLFSSupport.h RenderSystems/GLES2/include/EGL/EGLFS/OgreEGLFSSupport.h
--- RenderSystems/GLES2/include/EGL/EGLFS/OgreEGLFSSupport.h                                    1969-12-31 21:00:00.000000000 -0300
+++ RenderSystems/GLES2/include/EGL/EGLFS/OgreEGLFSSupport.h                                 2014-01-23 16:37:42.180062460 -0300
@@ -0,0 +1,57 @@
+/*
+-----------------------------------------------------------------------------
+This source file is part of OGRE
+(Object-oriented Graphics Rendering Engine)
+For the latest info, see http://www.ogre3d.org/
+
+Copyright (c) 2008 Renato Araujo Oliveira Filho <renatox@gmail.com>
+Copyright (c) 2000-2014 Torus Knot Software Ltd
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+-----------------------------------------------------------------------------
+*/
+
+#ifndef __EGLFSSupport_H__
+#define __EGLFSSupport_H__
+
+#include "OgreEGLSupport.h"
+
+namespace Ogre {
+    class _OgrePrivate EGLFSSupport : public EGLSupport
+    {
+        public:
+            EGLFSSupport();
+            virtual ~EGLFSSupport();
+
+//                     virtual GLES2PBuffer* createPBuffer(PixelComponentType format,
+//                                                                            size_t width, size_t height);
+
+                       virtual void switchMode(uint& width, uint& height, short& frequency) {}
+
+                       //Moved this here from EGLSupport because maybe it should be more native.
+                                       RenderWindow* newWindow(const String& name,
+                                                               unsigned int width, unsigned int height,
+                                                                                       bool fullScreen,
+                                                                                                               const NameValuePairList *miscParams = 0);
+
+       };
+}
+
+#endif
+
diff -x 'build*' -x linaro.cmake -Naur RenderSystems/GLES2/include/EGL/EGLFS/OgreEGLFSWindow.h RenderSystems/GLES2/include/EGL/EGLFS/OgreEGLFSWindow.h
--- RenderSystems/GLES2/include/EGL/EGLFS/OgreEGLFSWindow.h                                    1969-12-31 21:00:00.000000000 -0300
+++ RenderSystems/GLES2/include/EGL/EGLFS/OgreEGLFSWindow.h                                 2014-01-23 15:41:11.275318906 -0300
@@ -0,0 +1,68 @@
+/*
+-----------------------------------------------------------------------------
+This source file is part of OGRE
+    (Object-oriented Graphics Rendering Engine)
+For the latest info, see http://www.ogre3d.org/
+
+Copyright (c) 2008 Renato Araujo Oliveira Filho <renatox@gmail.com>
+Copyright (c) 2000-2014 Torus Knot Software Ltd
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+-----------------------------------------------------------------------------
+*/
+
+#ifndef __EGLFSWindow_H__
+#define __EGLFSWindow_H__
+
+#include "OgreEGLWindow.h"
+#include "OgreEGLFSSupport.h"
+
+namespace Ogre {
+    class _OgrePrivate EGLFSWindow : public EGLWindow
+    {
+    protected:
+       EGLFSSupport* mGLSupport;
+
+               //Changed these variables back to Window type because
+                         //it seems they are not used outside this class.
+                              NativeWindowType mParentWindow;
+                                               NativeWindowType mExternalWindow;
+                                                                virtual EGLContext * createEGLContext() const;
+                                                                        virtual void getLeftAndTopFromNativeWindow(int & left, int & top, uint width, uint height);
+                                                                                virtual void initNativeCreatedWindow(const NameValuePairList *miscParams);
+                                                                                        virtual void createNativeWindow( int &left, int &top, uint &width, uint &height, String &title );
+                                                                                                virtual void reposition(int left, int top);
+                                                                                                        virtual void resize(unsigned int width, unsigned int height);
+                                                                                                                virtual void windowMovedOrResized();
+                                                                                                                        virtual void switchFullScreen(bool fullscreen);
+
+
+       public:
+            EGLFSWindow(EGLFSSupport* glsupport);
+            virtual  ~EGLFSWindow();
+
+           //virtual void setFullscreen (bool fullscreen, uint width, uint height);
+
+           //Moved this from EGLWindow because it has some native calls.
+            void create(const String& name, unsigned int width, unsigned int height,
+                        bool fullScreen, const NameValuePairList *miscParams);
+                        };
+}
+
+#endif
diff -x 'build*' -x linaro.cmake -Naur RenderSystems/GLES2/include/EGL/EGLFS/OgreGLES2Util.h RenderSystems/GLES2/include/EGL/EGLFS/OgreGLES2Util.h
--- RenderSystems/GLES2/include/EGL/EGLFS/OgreGLES2Util.h                                    1969-12-31 21:00:00.000000000 -0300
+++ RenderSystems/GLES2/include/EGL/EGLFS/OgreGLES2Util.h                                 2014-01-23 15:28:03.247304522 -0300
@@ -0,0 +1,41 @@
+/*
+-----------------------------------------------------------------------------
+This source file is part of OGRE
+(Object-oriented Graphics Rendering Engine)
+For the latest info, see http://www.ogre3d.org/
+
+Copyright (c) 2000-2014 Torus Knot Software Ltd
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+-----------------------------------------------------------------------------
+*/
+
+#ifndef __GLES2Util_H__
+#define __GLES2Util_H__
+
+#include "OgreEGLFSSupport.h"
+
+namespace Ogre {
+    inline GLES2Support* getGLSupport()
+    {
+        return new EGLFSSupport();
+    }
+};
+
+#endif
diff -x 'build*' -x linaro.cmake -Naur RenderSystems/GLES2/src/EGL/EGLFS/OgreEGLFSContext.cpp RenderSystems/GLES2/src/EGL/EGLFS/OgreEGLFSContext.cpp
--- RenderSystems/GLES2/src/EGL/EGLFS/OgreEGLFSContext.cpp                                    1969-12-31 21:00:00.000000000 -0300
+++ RenderSystems/GLES2/src/EGL/EGLFS/OgreEGLFSContext.cpp                                 2014-01-23 12:25:24.558444741 -0300
@@ -0,0 +1,55 @@
+/*
+-----------------------------------------------------------------------------
+This source file is part of OGRE
+    (Object-oriented Graphics Rendering Engine)
+For the latest info, see http://www.ogre3d.org/
+
+Copyright (c) 2008 Renato Araujo Oliveira Filho <renatox@gmail.com>
+Copyright (c) 2000-2014 Torus Knot Software Ltd
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+-----------------------------------------------------------------------------
+*/
+
+#include "OgreGLES2RenderSystem.h"
+
+#include "OgreEGLSupport.h"
+#include "OgreEGLFSContext.h"
+
+#include "OgreRoot.h"
+
+namespace Ogre {
+    EGLFSContext::EGLFSContext(EGLDisplay eglDisplay,
+                                                  const EGLSupport* glsupport,
+                           ::EGLConfig glconfig,
+                           ::EGLSurface drawable)
+        : EGLContext(eglDisplay, glsupport, glconfig, drawable)
+    {
+    }
+
+    EGLFSContext::~EGLFSContext()
+    {
+    }
+
+    GLES2Context* EGLFSContext::clone() const
+    {
+        return new EGLFSContext(mEglDisplay, mGLSupport, mConfig, mDrawable);
+    }
+}
+
diff -x 'build*' -x linaro.cmake -Naur RenderSystems/GLES2/src/EGL/EGLFS/OgreEGLFSSupport.cpp RenderSystems/GLES2/src/EGL/EGLFS/OgreEGLFSSupport.cpp
--- RenderSystems/GLES2/src/EGL/EGLFS/OgreEGLFSSupport.cpp                                    1969-12-31 21:00:00.000000000 -0300
+++ RenderSystems/GLES2/src/EGL/EGLFS/OgreEGLFSSupport.cpp                                 2014-01-23 16:37:59.536062776 -0300
@@ -0,0 +1,105 @@
+/*
+-----------------------------------------------------------------------------
+This source file is part of OGRE
+    (Object-oriented Graphics Rendering Engine)
+For the latest info, see http://www.ogre3d.org/
+
+Copyright (c) 2008 Renato Araujo Oliveira Filho <renatox@gmail.com>
+Copyright (c) 2000-2014 Torus Knot Software Ltd
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+-----------------------------------------------------------------------------
+*/
+
+#include "OgreException.h"
+#include "OgreLogManager.h"
+#include "OgreStringConverter.h"
+#include "OgreRoot.h"
+
+#include "OgreGLES2Prerequisites.h"
+#include "OgreGLES2RenderSystem.h"
+
+#include "OgreEGLFSSupport.h"
+#include "OgreEGLFSWindow.h"
+#include "OgreEGLFSContext.h"
+
+namespace Ogre {
+
+    EGLFSSupport::EGLFSSupport()
+    {
+        // A connection that might be shared with the application for GL rendering:
+        //mGLDisplay = getGLDisplay();
+
+       // Checks if exists an EGLDisplay, to avoid reinitializing it.
+        bool exists = false;
+        mGLDisplay = eglGetCurrentDisplay();
+        if (mGLDisplay == EGL_NO_DISPLAY) {
+            mGLDisplay = (EGLDisplay *) 0;
+                // A connection that might be shared with the application for GL rendering:
+                    mGLDisplay = getGLDisplay();
+        } else {
+            exists = true;
+        }
+
+       if (exists)
+            return;
+
+        EGLConfig *glConfigs;
+        int config, nConfigs = 0;
+
+        glConfigs = chooseGLConfig(NULL, &nConfigs);
+
+        for (config = 0; config < nConfigs; config++)
+        {
+            int caveat, samples;
+
+            getGLConfigAttrib(glConfigs[config], EGL_CONFIG_CAVEAT, &caveat);
+
+            if (caveat != EGL_SLOW_CONFIG)
+            {
+                getGLConfigAttrib(glConfigs[config], EGL_SAMPLES, &samples);
+                mSampleLevels.push_back(StringConverter::toString(samples));
+            }
+        }
+
+        free(glConfigs);
+
+        removeDuplicates(mSampleLevels);
+    }
+
+    EGLFSSupport::~EGLFSSupport()
+    {
+        if (mGLDisplay)
+        {
+            eglTerminate(mGLDisplay);
+        }
+    }
+
+    RenderWindow* EGLFSSupport::newWindow(const String &name,
+                                        unsigned int width, unsigned int height,
+                                        bool fullScreen,
+                                        const NameValuePairList *miscParams)
+    {
+        EGLWindow* window = new EGLFSWindow(this);
+        window->create(name, width, height, fullScreen, miscParams);
+
+        return window;
+    }
+}
+
diff -x 'build*' -x linaro.cmake -Naur RenderSystems/GLES2/src/EGL/EGLFS/OgreEGLFSWindow.cpp RenderSystems/GLES2/src/EGL/EGLFS/OgreEGLFSWindow.cpp
--- RenderSystems/GLES2/src/EGL/EGLFS/OgreEGLFSWindow.cpp                                    1969-12-31 21:00:00.000000000 -0300
+++ RenderSystems/GLES2/src/EGL/EGLFS/OgreEGLFSWindow.cpp                                 2014-01-23 15:41:40.155319432 -0300
@@ -0,0 +1,360 @@
+/*
+-----------------------------------------------------------------------------
+This source file is part of OGRE
+    (Object-oriented Graphics Rendering Engine)
+For the latest info, see http://www.ogre3d.org/
+
+Copyright (c) 2008 Renato Araujo Oliveira Filho <renatox@gmail.com>
+Copyright (c) 2000-2014 Torus Knot Software Ltd
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+--------------------------------------------------------------------------*/
+
+#include "OgreRoot.h"
+#include "OgreException.h"
+#include "OgreLogManager.h"
+#include "OgreStringConverter.h"
+#include "OgreWindowEventUtilities.h"
+
+#include "OgreGLES2Prerequisites.h"
+#include "OgreGLES2RenderSystem.h"
+
+#include "OgreEGLFSSupport.h"
+#include "OgreEGLFSWindow.h"
+#include "OgreEGLFSContext.h"
+
+#include <iostream>
+#include <algorithm>
+#include <climits>
+
+namespace Ogre {
+          EGLFSWindow::EGLFSWindow(EGLFSSupport *glsupport)
+                                                : EGLWindow(glsupport) 
+                                                  //, mParentWindow(glsupport)   todo
+                                                  {
+                                                       mGLSupport = glsupport;
+                                                                  mNativeDisplay = 0;
+                                                                  }
+
+       EGLFSWindow::~EGLFSWindow()
+       {
+               mWindow = 0;
+               }
+
+
+       EGLContext * EGLFSWindow::createEGLContext() const
+       {
+               return new EGLFSContext(mEglDisplay, mGLSupport, mEglConfig, mEglSurface);
+               }
+
+       void EGLFSWindow::getLeftAndTopFromNativeWindow( int & left, int & top, uint width, uint height )
+       {
+       }
+
+       void EGLFSWindow::initNativeCreatedWindow(const NameValuePairList *miscParams)
+       {
+               if (miscParams)
+                  {
+                               NameValuePairList::const_iterator opt;
+                                                                       NameValuePairList::const_iterator end = miscParams->end();
+
+                       mExternalWindow = 0;
+                                         mNativeDisplay = 0;
+
+                       if ((opt = miscParams->find("parentWindowHandle")) != end)
+                                {
+                                                       //vector<String>::type tokens = StringUtil::split(opt->second, " :");
+                                                                                              StringVector tokens = StringUtil::split(opt->second, " :");
+
+                               if (tokens.size() == 3)
+                                                    {
+                                                                               // deprecated display:screen:xid format
+                                                                                                                }
+                                                                                                                         else
+                                                                                                                            {
+                                                                                                                                // xid format
+                                                                                                                                        }
+                                                                                                                                          }
+                                                                                                                                            else if ((opt = miscParams->find("externalWindowHandle")) != end)
+                                                                                                                                                    {
+                                                                                                                                                       //vector<String>::type tokens = StringUtil::split(opt->second, " :");
+                                                                                                                                                                                              StringVector tokens = StringUtil::split(opt->second, " :");
+
+                               LogManager::getSingleton().logMessage(
+                                                               "EGLWindow::create: The externalWindowHandle parameter is deprecated.\n"
+                                                                                                                      "Use the parentWindowHandle or currentGLContext parameter instead.");
+                                                                                                                                                  if (tokens.size() == 3)
+                                                                                                                                                                       {
+                                                                                                                                                                           // Old display:screen:xid format
+                                                                                                                                                                                                      // The old EGL code always created a "parent" window in this case:
+                                                                                                                                                                                                                 }
+                                                                                                                                                                                                                    else if (tokens.size() == 4)
+                                                                                                                                                                                                                                           {
+                                                                                                                                                                                                                                               // Old display:screen:xid:visualinfo format
+                                                                                                                                                                                                                                                                                     mExternalWindow = (NativeWindowType)StringConverter::parseUnsignedLong(tokens[2]);
+                                                                                                                                                                                                                                                                                                        }
+                                                                                                                                                                                                                                                                                                           else
+                                                                                                                                                                                                                                                                                                              {
+                                                                                                                                                                                                                                                                                                                  // xid format
+                                                                                                                                                                                                                                                                                                                           mExternalWindow = (NativeWindowType)StringConverter::parseUnsignedLong(tokens[0]);
+                                                                                                                                                                                                                                                                                                                                              }
+                                                                                                                                                                                                                                                                                                                                                }
+
+               }
+
+               // Validate externalWindowHandle
+                  if (mExternalWindow != 0)
+                     {
+                               mEglConfig = 0;
+                                            mEglSurface = createSurfaceFromWindow(mEglDisplay, (NativeWindowType)mExternalWindow);
+                                                        }
+
+
+               mIsTopLevel = true;
+
+       }
+
+       void EGLFSWindow::createNativeWindow( int &left, int &top, uint &width, uint &height, String &title )
+       {
+               mEglDisplay = mGLSupport->getGLDisplay();//todo
+
+               left = top = 0;
+
+               static struct mali_native_window native_window = {
+                              .width = width,
+                                             .height = height,
+                                                     };
+                                                       
+                                                               mWindow = &native_window;
+                                                                       if(!mWindow)
+                                                                               {
+                                                                                               OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR,
+                                                                                                                       "Unable to create an X NativeWindowType",
+                                                                                                                                         "EGLWindow::create");
+                                                                                                                                          }
+
+               mEglSurface = createSurfaceFromWindow(mGLSupport->getGLDisplay(), mWindow);
+
+               if (mIsFullScreen)
+                  {
+                               switchFullScreen(true);
+                                       }
+
+               WindowEventUtilities::_addRenderWindow(this);
+               }
+
+       void EGLFSWindow::reposition( int left, int top )
+       {
+               if (mClosed || ! mIsTopLevel)
+                  {
+                               return;
+                                       }
+                                       }
+
+       void EGLFSWindow::resize(uint width, uint height)
+       {
+       }
+
+       void EGLFSWindow::windowMovedOrResized()
+       {
+       }
+
+       void EGLFSWindow::switchFullScreen(bool fullscreen)
+       { 
+       }
+
+       void EGLFSWindow::create(const String& name, uint width, uint height,
+                           bool fullScreen, const NameValuePairList *miscParams)
+                           {
+                           String title = name;
+                                   uint samples = 0;
+                                   int gamma;
+                                           short frequency = 0;
+                                           bool vsync = false;
+                                                   ::EGLContext eglContext = 0;
+                                                                int left = 0;
+                                                                int top  = 0;
+
+
+               mIsFullScreen = fullScreen;
+               
+                       if (miscParams)
+                       {
+                                   NameValuePairList::const_iterator opt;
+                                       NameValuePairList::const_iterator end = miscParams->end();
+
+                   if ((opt = miscParams->find("currentGLContext")) != end &&
+                           StringConverter::parseBool(opt->second))
+                               {
+                                       eglContext = eglGetCurrentContext();
+                                                                  EGL_CHECK_ERROR
+                                                                               if (eglContext == (::EGLContext) 0)
+                                                                                  {
+                                                                                                           OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR,
+                                                                                                                                    "currentGLContext was specified with no current GL context",
+                                                                                                                                                      "EGLWindow::create");
+                                                                                                                                                       }
+
+                               eglContext = eglGetCurrentContext();
+                                                  EGL_CHECK_ERROR
+                                                       mEglSurface = eglGetCurrentSurface(EGL_DRAW);
+                                                                               EGL_CHECK_ERROR
+                                                                                                       mIsExternalGLControl = true;
+                                                                                                                            }
+
+                   // Note: Some platforms support AA inside ordinary windows
+                       if ((opt = miscParams->find("FSAA")) != end)
+                           {
+                                                samples = StringConverter::parseUnsignedInt(opt->second);
+                                                    }
+
+                   if ((opt = miscParams->find("displayFrequency")) != end)
+                       {    
+                       frequency = (short)StringConverter::parseInt(opt->second);
+                           }
+
+                   if ((opt = miscParams->find("vsync")) != end)
+                       {
+                       vsync = StringConverter::parseBool(opt->second);
+                           }
+
+                   if ((opt = miscParams->find("gamma")) != end)
+                       {
+                       gamma = StringConverter::parseBool(opt->second);
+                           }
+
+                   if ((opt = miscParams->find("left")) != end)
+                       {
+                       left = StringConverter::parseInt(opt->second);
+                           }
+
+                   if ((opt = miscParams->find("top")) != end)
+                       {
+                       top = StringConverter::parseInt(opt->second);
+                           }
+
+                   if ((opt = miscParams->find("title")) != end)
+                       {
+                       title = opt->second;
+                           }
+
+                   if ((opt = miscParams->find("externalGLControl")) != end)
+                       {
+                       mIsExternalGLControl = StringConverter::parseBool(opt->second);
+                           }
+                               }
+
+               initNativeCreatedWindow(miscParams);
+
+               if (mEglSurface)
+               {
+                   mEglConfig = mGLSupport->getGLConfigFromDrawable (mEglSurface, &width, &height);
+                   }
+
+               if (!mEglConfig && eglContext)
+               {
+                   mEglConfig = mGLSupport->getGLConfigFromContext(eglContext);
+
+                   if (!mEglConfig)
+                       {
+                       // This should never happen.
+                       OGRE_EXCEPT(Exception::ERR_RENDERINGAPI_ERROR,
+                                   "Unexpected failure to determine a EGLFBConfig",
+                                       "EGLWindow::create");
+                                           }
+                                           }
+
+               mIsExternal = (mEglSurface != 0);
+
+               if (!mEglConfig)
+               {
+                  int minAttribs[] = {
+                  EGL_RED_SIZE,       5,
+                                  EGL_GREEN_SIZE,     6,
+                                          EGL_BLUE_SIZE,      5,
+                                                              EGL_DEPTH_SIZE,     16,
+                                                                              EGL_SAMPLES,        0,
+                                                                                      EGL_ALPHA_SIZE,     EGL_DONT_CARE,
+                                                                                              EGL_STENCIL_SIZE,   EGL_DONT_CARE,
+                                                                                              EGL_SAMPLE_BUFFERS,  0,
+                                                                                              EGL_NONE
+                                                                                                  };
+
+                   int maxAttribs[] = {
+                   EGL_RED_SIZE,       8,
+                                   EGL_GREEN_SIZE,     8,
+                                           EGL_BLUE_SIZE,      8,
+                                                           EGL_DEPTH_SIZE,     24,
+                                                                   EGL_ALPHA_SIZE,     8,
+                                                                                   EGL_STENCIL_SIZE,   8,
+                                                                                           EGL_SAMPLE_BUFFERS, 1,
+                                                                                                           EGL_SAMPLES, samples,
+                                                                                                                   EGL_NONE
+                                                                                                                       };
+
+                   mEglConfig = mGLSupport->selectGLConfig(minAttribs, maxAttribs);
+                       mHwGamma = false;
+                       }
+
+               if (!mIsTopLevel)
+               {
+                   mIsFullScreen = false;
+                       left = top = 0;
+                       }
+
+               if (mIsFullScreen)
+               {
+                   mGLSupport->switchMode (width, height, frequency);
+                   }
+
+               if (!mIsExternal)
+               {
+                           createNativeWindow(left, top, width, height, title);
+                                                    }
+
+               //mContext = createEGLContext();
+                          if (!mIsExternalGLControl) {
+                                 mContext = createEGLContext();
+
+                  ::EGLSurface oldDrawableDraw = eglGetCurrentSurface(EGL_DRAW);
+                             EGL_CHECK_ERROR
+                                        ::EGLSurface oldDrawableRead = eglGetCurrentSurface(EGL_READ);
+                                                   EGL_CHECK_ERROR
+                                                              ::EGLContext oldContext  = eglGetCurrentContext();
+                                                                         EGL_CHECK_ERROR
+
+                  int glConfigID;
+
+                  mGLSupport->getGLConfigAttrib(mEglConfig, EGL_CONFIG_ID, &glConfigID);
+                            LogManager::getSingleton().logMessage("EGLWindow::create used FBConfigID = " + StringConverter::toString(glConfigID));
+                                                                                     }
+        
+               mName = name;
+                       mWidth = width;
+                               mHeight = height;
+                                       mLeft = left;
+                                               mTop = top;
+                                                       mActive = true;
+                                                               mVisible = true;
+
+               mClosed = false;
+               }
+
+}
+
diff -x 'build*' -x linaro.cmake -Naur RenderSystems/GLES2/src/EGL/OgreEGLSupport.cpp RenderSystems/GLES2/src/EGL/OgreEGLSupport.cpp
--- RenderSystems/GLES2/src/EGL/OgreEGLSupport.cpp                                    2014-01-21 19:27:16.000000000 -0300
+++ RenderSystems/GLES2/src/EGL/OgreEGLSupport.cpp                                 2014-01-23 16:38:20.468063165 -0300
@@ -150,7 +150,7 @@
                 }
             }
 
-            if (!optDisplayFrequency->second.possibleValues.empty())
+            /*if (!optDisplayFrequency->second.possibleValues.empty())
             {
                 optDisplayFrequency->second.currentValue = optDisplayFrequency->second.possibleValues[0];
             }
@@ -158,7 +158,7 @@
             {
                 optVideoMode->second.currentValue = StringConverter::toString(mVideoModes[0].first.first,4) + " x " + StringConverter::toString(mVideoModes[0].first.second,4);
                 optDisplayFrequency->second.currentValue = StringConverter::toString(mVideoModes[0].second) + " MHz";
-            }
+            }*/
         }
     }
 